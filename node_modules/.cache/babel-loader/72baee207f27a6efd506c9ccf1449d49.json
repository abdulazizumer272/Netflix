{"ast":null,"code":"var _jsxFileName = \"/Users/abdulazizumer/Downloads/Netflix-main/Netflix/src/Row.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row__posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    onClick: () => handleClick(movie),\n    className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n    src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  })));\n}\n\nexport default Row;","map":{"version":3,"sources":["/Users/abdulazizumer/Downloads/Netflix-main/Netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path","name","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\"\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    }\n  }\n  const handleClick = (movie) => {\n    if(trailerUrl){\n      setTrailerUrl('')\n    }else {\n      movieTrailer(movie?.title || \"\")\n      .then((url) => {\n        const urlParams = new URLSearchParams(new URL(url).search)\n        setTrailerUrl(urlParams.get('v'))\n      })\n      .catch((error) => console.log(error))\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      <div style={{ padding: \"40px\"}}>\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}